{"version":3,"sources":["components/WeatherBlock.js","scenes/WeatherScene.js","App.js","serviceWorker.js","index.js"],"names":["WeatherBlock","_this$props","this","props","day","weatherIcon","Temp","Alt","react_default","a","createElement","className","src","alt","React","Component","WeatherScene","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchData","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","state","city","sent","json","setState","items","isLoading","stop","currentTime","currentDate","setInterval","_this2","Date","toLocaleTimeString","event","_this3","_this$state","Fragment","dist_default","options","onChange","onSelect","value","placeholder","WeatherBlock_WeatherBlock","current","condition","icon","temp_c","text","humidity","wind_kph","last_updated","App","WeatherScene_WeatherScene","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a18b859c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./WeatherBlock.css\";\r\n\r\nexport default class WeatherBlock extends React.Component {\r\n  render() {\r\n    const { day, weatherIcon, Temp, Alt } = this.props;\r\n\r\n    return (\r\n      <div className=\"weatherBlockContainer\">\r\n        <p>{day}</p>\r\n        <img src={weatherIcon} alt={Alt} />\r\n\r\n        <div className=\"Temp\">\r\n          <p>{Temp} Â° </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport WeatherBlock from \"../components/WeatherBlock\";\r\nimport Dropdown from \"react-dropdown\";\r\nimport \"react-dropdown/style.css\";\r\nimport \"./weatherScene.css\";\r\n\r\nexport default class WeatherScene extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: true,\r\n      items: [],\r\n      city: \"Antwerp\",\r\n      currentTime: null,\r\n      currentDate: null\r\n    };\r\n  }\r\n\r\n  fetchData = async () => {\r\n    const apiKey = \"c55a767d38684c4fb37145650190305\";\r\n    const response = await fetch(\r\n      `https://api.apixu.com/v1/current.json?key=${apiKey}&q=${this.state.city}`\r\n    );\r\n    const data = await response.json();\r\n\r\n    await this.setState({\r\n      items: data,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.fetchData();\r\n    setInterval(() => {\r\n      this.setState({\r\n        currentTime: new Date().toLocaleTimeString()\r\n      });\r\n    });\r\n  }\r\n\r\n  async onSelect(event) {\r\n    await this.setState({\r\n      city: event\r\n    });\r\n    await this.fetchData();\r\n  }\r\n  render() {\r\n    const { items, city, isLoading } = this.state;\r\n    const options = [\"Antwerp\", \"Brussels\", \"Paris\"];\r\n\r\n    // if (!isLoading) {\r\n    //   console.log(items.current);\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        {isLoading && <p>Loading weather...</p>}\r\n        {!isLoading && (\r\n          <>\r\n            <Dropdown\r\n              className=\"Dropdown\"\r\n              options={options}\r\n              onChange={event => {\r\n                this.onSelect(event.value);\r\n              }}\r\n              value={city}\r\n              placeholder=\"Select an option\"\r\n            />\r\n            <div className=\"weatherContainer\">\r\n              <WeatherBlock\r\n                day=\"Now\"\r\n                weatherIcon={items.current.condition.icon}\r\n                alt=\"Cloud-lightning\"\r\n                Temp={items.current.temp_c}\r\n              />\r\n              <div className=\"weatherInfoContainer\">\r\n                <p className=\"WeatherInfoItem\">\r\n                  Condition: <span>{items.current.condition.text} </span>\r\n                </p>\r\n                <p className=\"WeatherInfoItem\">\r\n                  Local Time:<span> {this.state.currentTime} </span>\r\n                </p>\r\n                <p className=\"WeatherInfoItem\">\r\n                  Humidity: <span>{items.current.humidity}%</span>\r\n                </p>\r\n                <p className=\"WeatherInfoItem\">\r\n                  Wind Speed: <span>{items.current.wind_kph} kph</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <p className=\"Update\">\r\n              Last updated on: {items.current.last_updated}\r\n            </p>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport WeatherScene from \"./scenes/WeatherScene\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherScene />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}